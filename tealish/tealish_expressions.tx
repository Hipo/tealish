
Expression:   BinaryOp | UnaryOp | Group | StdLibFunctionCall | FunctionCall | Field | Value;
Group: ('(' expression=BinaryOp ')');
UnaryOp: op=UnaryOperator a=Value;
UnaryOperator: '!' | '~' | 'b~';
BinaryOp: a=Value op=BinaryOperator b=Value;
BinaryOperator: '+' | '-' | '*' | '/' | '%'
    | '==' | '>=' | '<=' | '>' | '<' | '!='
    | '&&' | '||'
    | '|' | '%' | '^'
    | 'b+' | 'b-' | 'b/' | 'b*' | 'b%'
    | 'b==' | 'b!=' | 'b>=' | 'b<=' | 'b>' | 'b<'
    | 'b|' | 'b&' | 'b^';
FunctionCall: 
    name=Name 
    ('(' 
    args*=Expression[',']
    ')')
;
StdLibFunctionCall: 
    name=StdLibFunctionName 
    ('(' 
    args*=Expression[',']
    ')')
;
Field: TxnArrayField | TxnField | InnerTxnArrayField | InnerTxnField | GroupTxnArrayField | GroupTxnField | GlobalField;
FieldName: /([A-Z][A-Za-z_]+)/;
TxnField: 'Txn.' field=FieldName;
TxnArrayField: 'Txn.' field=FieldName '[' arrayIndex=Expression ']';
GroupTxnField: 'Gtxn[' index=GroupIndex '].' field=FieldName;
GroupTxnArrayField: 'Gtxn[' index=GroupIndex '].' field=FieldName '[' arrayIndex=Expression ']';
InnerTxnField: 'Itxn.' field=FieldName;
InnerTxnArrayField: 'Itxn.' field=FieldName '[' arrayIndex=Expression ']';
GlobalField: 'Global.' field=FieldName;
StructOrBoxField: name=Name '.' field=Name;
StructOrBoxArrayField: name=Name '.' field=StructFieldName '[' arrayIndex=Expression ']';
ArrayElement: name=StructFieldName '[' arrayIndex=Expression ']';
Value: StructLiteral | StdLibFunctionCall | FunctionCall | Field | StructOrBoxArrayField| StructOrBoxField | ArrayElement | UnaryOp | Group | Integer | Bytes | Constant | Enum | Variable;
Variable: name=Name;
Constant: name=/([A-Z][A-Z_0-9]+)/;
Enum: name=/([A-Z][A-Za-z_0-9]+)/;
Name: (/([a-z][A-Za-z_0-9]*)(\[[0-9]+\])?/ | /_/);
StructFieldName: /([A-Za-z_0-9]*)/;
StdLibFunctionName: /([A-Z][A-Za-z_0-9]+)/;
GroupIndex: NegativeGroupIndex | PositiveGroupIndex | Expression;
NegativeGroupIndex: '-' index=INT;
PositiveGroupIndex: '+' index=INT;
HexBytes: value=/0x([a-fA-F0-9]+)/;
Integer: value=/[0-9_]+/;
Bytes: value=STRING | HexBytes;
KeyValue: key=Name ':' value=Expression;
StructLiteral: name=FieldName ('{' args*=KeyValue[','] '}');
