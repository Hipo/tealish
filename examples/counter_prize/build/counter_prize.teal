#pragma version 8

// ApplicationID will be 0 when the app is being created
// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Initialise the counter state to 0
    // app_global_put("counter", 0)
    pushbytes "counter"
    pushint 0
    app_global_put
    // exit(1)
    pushint 1
    return
  l0_end: // end

// if Txn.OnCompletion == UpdateApplication:
  txn OnCompletion
  pushint 4 // UpdateApplication
  ==
  bz l1_end
  // then:
    // Only allow the Creator to update the app
    // assert(Txn.Sender == Global.CreatorAddress)
    txn Sender
    global CreatorAddress
    ==
    assert
    // exit(1)
    pushint 1
    return
  l1_end: // end

// Ensure that this is a NoOp application call. Don't allow optin, delete, etc
// assert(Txn.OnCompletion == NoOp)
txn OnCompletion
pushint 0 // NoOp
==
assert

// Read the counter value from state and increment it
// int counter = app_global_get("counter") [slot 0]
pushbytes "counter"
app_global_get
store 0 // counter
// counter = counter + 1
load 0 // counter
pushint 1
+
store 0 // counter
// app_global_put("counter", counter)
pushbytes "counter"
load 0 // counter
app_global_put

// if counter == 10:
  load 0 // counter
  pushint 10
  ==
  bz l2_elif_0
  // then:
    // If the counter is 10 make a Payment transaction
    // inner_txn:
    itxn_begin
      // TypeEnum: Pay
      pushint 1 // Pay
      itxn_field TypeEnum
      // Receiver: Txn.Sender
      txn Sender
      itxn_field Receiver
      // Amount: 10000000
      pushint 10000000
      itxn_field Amount
    itxn_submit
    // end inner_txn
  b l2_end
  l2_elif_0:
  // elif counter > 10:
  load 0 // counter
  pushint 10
  >
  bz l2_end
    // If the counter is past 10 fail the program
    // exit(0)
    pushint 0
    return
  l2_end: // end

// Exit the program with approval
// exit(1)
pushint 1
return

